<style>
  #loadingOverlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(240, 240, 240, 0.95);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    z-index: 999;
    font-family: Helvetica, sans-serif;
    color: #555454;
    display: none;
  }

  #progressBar {
    width: 80%;
    height: 8px;
    background: #ccc;
    border-radius: 8px;
    overflow: hidden;
    margin-top: 1rem;
  }

  #progressFill {
    width: 0%;
    height: 100%;
    background: #555454;
    animation: fill 5s linear infinite;
  }

  @keyframes fill {
    0% { width: 0%; }
    100% { width: 100%; }
  }
</style>

<form id="uploadForm" style="display:flex; flex-direction:column; gap:1rem;">
  <input type="file" name="file" required />
  <select name="type">
    <option value="image">Imagen → WebP</option>
    <option value="video">Video → WebM</option>
  </select>
  <input type="password" name="apiKey" placeholder="API Key" required />
  <button type="submit" style="background:#555454; color:white; padding:0.5rem 1rem; border:none; border-radius:8px; cursor:pointer;">
    Convertir
  </button>
</form>

<div id="loadingOverlay">
  <h2 id="loadingMessage">Cargando convertidor...</h2>
  <div id="progressBar"><div id="progressFill"></div></div>
</div>

<script is:inline>
  window.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("uploadForm");
    const overlay = document.getElementById("loadingOverlay");
    const loadingMessage = document.getElementById("loadingMessage");

    const tips = [
      "Estirando píxeles...",
      "Comprobando compresión galáctica...",
      "Generando WebP místico...",
      "Cargando texturas del alma...",
      "Aplicando filtro Busy Flow...",
      "Traduciendo bits a estilo...",
      "Enfriando los motores de video..."
    ];

    let tipIndex = 0;
    let tipInterval;

    function startLoading() {
      overlay.style.display = "flex";
      loadingMessage.textContent = tips[tipIndex];
      tipInterval = setInterval(() => {
        tipIndex = (tipIndex + 1) % tips.length;
        loadingMessage.textContent = tips[tipIndex];
      }, 2500);
    }

    function stopLoading() {
      overlay.style.display = "none";
      clearInterval(tipInterval);
    }

    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      const formData = new FormData(form);
      const type = form.querySelector("select[name='type']");
      const fileInput = form.querySelector("input[name='file']");
      const apiKeyInput = form.querySelector("input[name='apiKey']");

      if (!type || !fileInput || !apiKeyInput) {
        alert("Faltan campos en el formulario.");
        return;
      }

      const endpoint = type.value === 'image' ? '/convert-image' : '/convert-video';

      try {
        startLoading();

        const res = await fetch(`https://valen-dev-helpers.onrender.com${endpoint}`, {
          method: 'POST',
          headers: {
            'x-api-key': apiKeyInput.value
          },
          body: formData
        });

        if (!res.ok) {
          const errorText = await res.text();
          alert(`Error: ${res.status} - ${errorText}`);
          stopLoading();
          return;
        }

        const blob = await res.blob();
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = fileInput.files[0].name.split('.')[0] + (type.value === 'image' ? '.webp' : '.webm');
        a.click();
      } catch (error) {
        alert("Error de red o inesperado: " + error.message);
        console.error(error);
      } finally {
        stopLoading();
      }
    });
  });
</script>

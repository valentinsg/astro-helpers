<style>
  /* Tus estilos actuales se mantienen igual */
  #loadingOverlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(240, 240, 240, 0.95);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    z-index: 999;
    font-family: Helvetica, sans-serif;
    color: #555454;
    display: none;
  }

  #progressBar {
    width: 80%;
    height: 8px;
    background: #ccc;
    border-radius: 8px;
    overflow: hidden;
    margin-top: 1rem;
  }

  #progressFill {
    width: 0%;
    height: 100%;
    background: #555454;
    animation: fill 5s linear infinite;
  }

  @keyframes fill {
    0% { width: 0%; }
    100% { width: 100%; }
  }
</style>

<form id="uploadForm" style="display:flex; flex-direction:column; gap:1rem;">
  <input type="file" name="files" id="fileInput" multiple accept="image/*" style="display: none;" />
  <button type="button" onclick="document.getElementById('fileInput').click()" 
          style="background:#f0f0f0; color:#555454; padding:1rem; border:2px dashed #ccc; border-radius:8px; cursor:pointer;">
    Arrastra o haz clic para seleccionar imágenes
  </button>
  <div id="fileList" style="font-size:0.9em; color:#666;"></div>
  <select name="type">
    <option value="image">Imagen → WebP</option>
    <option value="video" disabled>Video → WebM (próximamente)</option>
  </select>
  <input type="password" name="apiKey" placeholder="API Key" required />
  <button type="submit" style="background:#555454; color:white; padding:0.8rem; border:none; border-radius:8px; cursor:pointer; font-weight:bold;">
    Convertir a WebP
  </button>
</form>

<div id="loadingOverlay">
  <h2 id="loadingMessage">Cargando convertidor...</h2>
  <div id="progressBar"><div id="progressFill"></div></div>
</div>

<script is:inline>
  window.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("uploadForm");
    const fileInput = document.getElementById("fileInput");
    const fileList = document.getElementById("fileList");
    const overlay = document.getElementById("loadingOverlay");
    const loadingMessage = document.getElementById("loadingMessage");
    const submitButton = form.querySelector('button[type="submit"]');

    const tips = [
      "Estirando píxeles...",
      "Comprobando compresión galáctica...",
      "Generando WebP místico...",
      "Cargando texturas del alma...",
      "Aplicando filtro Busy Flow...",
      "Traduciendo bits a estilo...",
      "Enfriando los motores de video..."
    ];

    let tipIndex = 0;
    let tipInterval;

    // Mostrar archivos seleccionados
    fileInput.addEventListener('change', () => {
      const files = Array.from(fileInput.files);
      if (files.length > 0) {
        fileList.innerHTML = `<strong>Archivos seleccionados (${files.length}):</strong><br>` + 
          files.map((file, index) => 
            `${index + 1}. ${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)`
          ).join('<br>');
        
        // Actualizar texto del botón
        submitButton.textContent = `Convertir ${files.length} ${files.length === 1 ? 'imagen' : 'imágenes'}`;
      } else {
        fileList.innerHTML = '';
        submitButton.textContent = 'Convertir';
      }
    });

    // Permitir arrastrar y soltar archivos
    const dropZone = document.querySelector('button[onclick*="getElementById"]');
    
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      dropZone.addEventListener(eventName, preventDefaults, false);
    });

    function preventDefaults(e) {
      e.preventDefault();
      e.stopPropagation();
    }

    ['dragenter', 'dragover'].forEach(eventName => {
      dropZone.addEventListener(eventName, highlight, false);
    });

    ['dragleave', 'drop'].forEach(eventName => {
      dropZone.addEventListener(eventName, unhighlight, false);
    });

    function highlight() {
      dropZone.style.borderColor = '#555454';
      dropZone.style.backgroundColor = '#e8e8e8';
    }

    function unhighlight() {
      dropZone.style.borderColor = '#ccc';
      dropZone.style.backgroundColor = '#f0f0f0';
    }

    dropZone.addEventListener('drop', handleDrop, false);

    function handleDrop(e) {
      const dt = e.dataTransfer;
      const files = dt.files;
      fileInput.files = files;
      fileInput.dispatchEvent(new Event('change'));
    }

    function startLoading() {
      overlay.style.display = "flex";
      loadingMessage.textContent = tips[tipIndex];
      tipInterval = setInterval(() => {
        tipIndex = (tipIndex + 1) % tips.length;
        loadingMessage.textContent = tips[tipIndex];
      }, 2500);
    }

    function stopLoading() {
      overlay.style.display = "none";
      clearInterval(tipInterval);
    }

    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      const type = form.querySelector("select[name='type']").value;
      const apiKeyInput = form.querySelector("input[name='apiKey']").value;
      const files = fileInput.files;

      if (files.length === 0) {
        alert("Por favor, selecciona al menos un archivo.");
        return;
      }

      if (!apiKeyInput) {
        alert("Por favor, ingresa la API Key.");
        return;
      }

      const endpoint = type === 'image' ? '/convert-image' : '/convert-video';
      const formData = new FormData();

      // Agregar archivos al FormData
      Array.from(files).forEach((file, index) => {
        formData.append('files', file);
      });

      // Agregar la API key al FormData (aunque también va en los headers)
      formData.append('apiKey', apiKeyInput);

      try {
        startLoading();

        const res = await fetch(`https://valen-dev-helpers.onrender.com${endpoint}`, {
          method: 'POST',
          headers: {
            'x-api-key': apiKeyInput
          },
          body: formData
        });

        if (!res.ok) {
          const errorData = await res.json().catch(() => ({}));
          throw new Error(errorData.detail || `Error ${res.status}: ${res.statusText}`);
        }

        const blob = await res.blob();
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        
        // Determinar el nombre del archivo de descarga
        if (files.length === 1) {
          a.download = files[0].name.split('.').slice(0, -1).join('.') + '.webp';
        } else {
          a.download = `imagenes_convertidas_${new Date().toISOString().slice(0, 10)}.zip`;
        }
        
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
      } catch (error) {
        alert("Error: " + (error.message || "Error al procesar la solicitud"));
        console.error("Error:", error);
      } finally {
        stopLoading();
      }
    });
  });
</script>